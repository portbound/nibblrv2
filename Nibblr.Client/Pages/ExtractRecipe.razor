@page "/ExtractRecipe"
@inject HttpClient Client
@using System.Text.Encodings.Web
@using System.Web
@using Shared.Models
@using Client.Components

<MudBreadcrumbs Items="crumbs"></MudBreadcrumbs>

<MudGrid>
    <MudItem xs="11">
        <MudPaper>
            <MudTextField ShrinkLabel Label="URL" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Language" AdornmentColor="Color.Info" @bind-Value="Url" />
        </MudPaper>
    </MudItem>
    <MudItem xs="1" Class="align-self-center">
        <MudFab Size="Size.Medium" StartIcon="@Icons.Material.Filled.Search" Color="Color.Primary" OnClick="() => ExtractRecipeAsync(Url)"/>
    </MudItem>
</MudGrid>

@if (ExtractedRecipe is not null) { 
    // TODO Replace this with editable Recipe Component 
    <TemporaryRecipeComponent ExtractedRecipe="ExtractedRecipe"/>
 }

@code {
    private readonly List<BreadcrumbItem> crumbs =
    [
        new BreadcrumbItem("Home", href: "#"),
        new BreadcrumbItem("Extract Recipe", href: null, disabled: true),
    ];

    public Recipe? ExtractedRecipe { get; set; } = null;
    
    [Parameter]
    public string Url { get; set; }

    private async Task ExtractRecipeAsync(string url) {
        var encodedURI = HttpUtility.UrlEncode(Url);
        Recipe? recipe = await Client.GetFromJsonAsync<Recipe>($"/api/AI/extract?url={encodedURI}");

        if (recipe is not null) {
            ExtractedRecipe = recipe;
        }
    }
}