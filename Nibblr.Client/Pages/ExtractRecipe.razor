@page "/ExtractRecipe"
@inject HttpClient Client
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@using System.Web
@using Shared.Models

<MudBreadcrumbs Items="crumbs"></MudBreadcrumbs>

<MudStack Row="true" AlignItems="AlignItems.Center">
        <MudTextField ShrinkLabel Label="URL" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Language" AdornmentColor="Color.Info" @bind-Value="Url" />
        <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Search" @onclick="() => ExtractRecipeAsync(Url)">Search</MudButton>
</MudStack>

@if (IsLoading) {
    <div class="d-flex justify-space-between align-center">
        <MudImage Src="Nibblr.jpeg" Alt="Nibblr"/>
        <MudProgressLinear Color="Color.Tertiary" Indeterminate="true" Class="my-7"/>
    </div>
}

@code {
    private readonly List<BreadcrumbItem> crumbs = [
        new BreadcrumbItem("Home", href: "#"),
        new BreadcrumbItem("Extract Recipe", href: null, disabled: true),
    ];

    private Recipe? ExtractedRecipe { get; set; } = null;
    private bool IsLoading { get; set; } = false;

    [Parameter] public string Url { get; set; }

    private async Task ExtractRecipeAsync(string url) {
        if (string.IsNullOrWhiteSpace(url)) {
            Snackbar.Add("URL is required", Severity.Error);
            return;
        }
        IsLoading = true;
        var encodedURI = HttpUtility.UrlEncode(Url);
        ExtractedRecipe = await Client.GetFromJsonAsync<Recipe>($"/api/AI/extract?url={encodedURI}");
        var response = await Client.PostAsJsonAsync("api/recipes", ExtractedRecipe);
        var createdRecipe = await response.Content.ReadFromJsonAsync<Recipe>();
        IsLoading = false;
        NavigateToRecipeView(createdRecipe.ID);
    }
    
    private void NavigateToRecipeView(int id) {
        Navigation.NavigateTo($"RecipeView/{id}");    
    }
}