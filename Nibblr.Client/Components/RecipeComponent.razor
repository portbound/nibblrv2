@using Shared.Models
@inject HttpClient Client
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveWebAssembly

@if (_recipe == null) {
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
} else {
    <MudPaper Elevation="0" Outlined="true" Class="pa-4">
        <MudGrid>
            <MudItem xs="12">
                    <MudStack Row="true">
                        <MudPaper Elevation="0">
                            <MudText Typo="Typo.h3">@_recipe.Name</MudText>
                        </MudPaper>
                        <MudSpacer/>
                        <MudTooltip Text="@(_recipe.Bookmarked ? "Remove Bookmark" : "Add Bookmark")">
                            <MudIconButton Size="Size.Large"
                                           Icon="@Icons.Material.Filled.PushPin"
                                           Color="@(_recipe.Bookmarked ? Color.Error : Color.Default)"
                                           @onclick="ToggleBookmark"/>
                        </MudTooltip>
                    </MudStack>
                <MudText Class="mt-2 mb-4" Typo="Typo.subtitle1">
                    @(!string.IsNullOrEmpty(_recipe.Description) ? _recipe.Description : "No description available.")
                </MudText>
            </MudItem>

            <MudItem xs="12" Class="pt-0">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudPaper Elevation="0">
                        @if (_recipe.Tags.Count == 0) {
                            <MudChip T="string" Color="Color.Info" OnClick="EnableEdit">Add Tag</MudChip>
                        } else {
                            @foreach (Tag item in _recipe.Tags) {
                                <MudChip T="string" Color="Color.Success">@item.Name</MudChip>
                            }
                        }
                    </MudPaper>
                    <MudSpacer />
                    <MudTooltip Text="Edit Recipe">
                        <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.Edit" Color="Color.Info" @onclick="EnableEdit"></MudIconButton>
                    </MudTooltip>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudCard Elevation="0" Outlined="true" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row="true">
                                <MudText Typo="Typo.h6">Macros</MudText>
                                <MudSpacer />
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center">
                                    <MudText Typo="Typo.h6">@_recipe.Servings</MudText>
                                    <MudText Typo="Typo.caption">Serving(s)</MudText>
                                </MudPaper>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="3">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Class="d-sm-none"Typo="Typo.h6">@(_recipe.Calories != null ? _recipe.Calories : "--")</MudText>
                                    <MudText Class="d-none d-sm-block"Typo="Typo.h5">@(_recipe.Calories != null ? _recipe.Calories : "--")</MudText>
                                    <MudText Typo="Typo.caption">Calories</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="3">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Class="d-sm-none" Typo="Typo.h6">@(_recipe.Fat != null ? _recipe.Fat : "--")</MudText>
                                    <MudText Class="d-none d-sm-block" Typo="Typo.h5">@(_recipe.Fat != null ? _recipe.Fat : "--")</MudText>
                                    <MudText Typo="Typo.caption">Fats(g)</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="3">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Class="d-sm-none" Typo="Typo.h6">@(_recipe.Carbs != null ? _recipe.Carbs : "--")</MudText>
                                    <MudText Class="d-none d-sm-block" Typo="Typo.h5">@(_recipe.Carbs != null ? _recipe.Carbs : "--")</MudText>
                                    <MudText Typo="Typo.caption">Carbs(g)</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="3">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Class="d-sm-none" Typo="Typo.h6">@(_recipe.Protein != null ? _recipe.Protein : "--")</MudText>
                                    <MudText Class="d-none d-sm-block" Typo="Typo.h5">@(_recipe.Protein != null ? _recipe.Protein : "--")</MudText>
                                    <MudText Typo="Typo.caption">Protein(g)</MudText>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudCard Elevation="0" Outlined="true" Class="mb-4 h-100">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Ingredients</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudTooltip Text="Collapse Container">
                                <MudIconButton Icon="@Icons.Material.Filled.Expand" Color="Color.Dark"
                                               @onclick="() => _ingredientsVisible = !_ingredientsVisible"/>
                            </MudTooltip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCollapse Expanded="_ingredientsVisible">
                        <MudCardContent>
                            <MudList T="Ingredients" Dense="true" ReadOnly="true">
                                @foreach (Ingredients ingredient in _recipe.Ingredients) {
                                    <MudListItem Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" IconColor="Color.Default">
                                        <div class="d-flex align-center">
                                            <div class="flex-grow-1">
                                                <MudText>
                                                    <MudText Inline="true"><b>@($"{ingredient.Quantity} {ingredient.Unit}")</b></MudText>
                                                    <MudText Inline="true">@ingredient.Name</MudText>
                                                </MudText>
                                                @if (!string.IsNullOrEmpty(ingredient.Notes)) {
                                                    <MudText Typo="Typo.caption" Color="Color.Default"><em>@ingredient.Notes</em></MudText>
                                                }
                                            </div>
                                            <MudTooltip Text="Add to shopping list">
                                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Add" Color="Color.Default"
                                                               @onclick="@(() => AddToShoppingList(ingredient))"/>
                                            </MudTooltip>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                            <MudTooltip Text="Add all to shopping list">
                                <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary"
                                                @onclick="@(() => Snackbar.Add("All ingredients added to shopping list", Severity.Success))"/>
                            </MudTooltip>
                        </MudCardContent>
                    </MudCollapse>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudCard Elevation="0" Outlined="true" Class="h-100">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Instructions</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @* <MudTooltip Text="Print instructions"> *@
                            @*     <MudIconButton Icon="@Icons.Material.Filled.Print" Color="Color.Default" /> *@
                            @* </MudTooltip> *@
                            <MudTooltip Text="Collapse Container">
                                <MudIconButton Icon="@Icons.Material.Filled.Expand" Color="Color.Dark"
                                               @onclick="() => _instructionsVisible = !_instructionsVisible"/>
                            </MudTooltip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCollapse Expanded="_instructionsVisible">
                        <MudCardContent>
                        <MudList T="Instructions" Dense="true" ReadOnly="true">
                            @foreach (Instructions instruction in _recipe.Instructions) {
                                <MudListItem>
                                    <div class="d-flex">
                                        <MudAvatar Color="Color.Info" Class="mr-3" Size="Size.Medium">@instruction.Step</MudAvatar>
                                        <div>
                                            <MudText>@instruction.Body</MudText>
                                        </div>
                                    </div>
                                </MudListItem>
                            }    
                        </MudList>
                    </MudCardContent>
                    </MudCollapse>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {
    private Recipe? _recipe = new();
    private bool _isEditing = false;
    private bool _ingredientsVisible = true;
    private bool _instructionsVisible = true;

    [Parameter] public Guid? ID { get; set; }
    [Parameter] public Recipe? ExtractedRecipe { get; set; } = null;
    [Parameter] public EventCallback<string> OnRecipeSet { get; set; }
    [Parameter] public EventCallback<bool> OnToggleIsEditing { get; set; }

    protected override async Task OnInitializedAsync() {
        if (ExtractedRecipe != null) {
            _recipe = ExtractedRecipe;
        }

        if (ID != null) {
            _recipe = await Client.GetFromJsonAsync<Recipe>($"api/recipes/{ID}");
        }
        
        if (_recipe.ID != null) {
            await OnRecipeSet.InvokeAsync(_recipe.Name);
        } else {
            await OnRecipeSet.InvokeAsync("New Recipe");
        }
    }

    // private string FormatQuantity(Ingredients ingredient) {
    //     if (ingredient.Quantity != null) {
    //         return $"{ingredient.Quantity} ({ingredient.Weight}{ingredient.WeightUnit})";
    //     }
    //     return $"{ingredient.Weight}{ingredient.WeightUnit}";
    // }

    private void AddToShoppingList(Ingredients ingredient) {
        Snackbar.Add($"Added {ingredient.Name} to shopping list", Severity.Success);
        // Implement shopping list functionality
    }

    private async Task ToggleBookmark() {
        _recipe.Bookmarked = !_recipe.Bookmarked;
        await Client.PutAsJsonAsync($"api/recipes/{ID}", _recipe);
    }
    
    private async Task EnableEdit() {
        await OnToggleIsEditing.InvokeAsync();
    }
}