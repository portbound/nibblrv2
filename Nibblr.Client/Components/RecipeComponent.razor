@using Shared.Models
@inject HttpClient Client
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveWebAssembly

@if (recipe == null) {
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
} else {
    <MudPaper Elevation="2" Class="pa-4">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h3">@recipe.Name</MudText>
                        <MudTooltip Text="Edit Recipe">
                            <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.EditNote" Color="Color.Info" @onclick="EnableEdit" />
                        </MudTooltip>
                    </MudStack>
                    <MudTooltip Text="@(recipe.Bookmarked ? "Remove Bookmark" : "Add Bookmark")">
                        <MudIconButton Size="Size.Medium"
                                       Icon="@Icons.Material.Filled.Bookmark"
                                       Color="@(recipe.Bookmarked ? Color.Warning : Color.Default)"
                                       @onclick="ToggleBookmark" />
                    </MudTooltip>
                </div>
                <MudText Class="mt-2 mb-4" Typo="Typo.subtitle1">
                    @(!string.IsNullOrEmpty(recipe.Description) ? recipe.Description : "No description available.")
                </MudText>
            </MudItem>

            <MudItem xs="12">
                @foreach (var tag in recipe.Tags) {
                    <MudChip T="string" Color="Color.Tertiary">@tag</MudChip>
                }
            </MudItem>
            <MudItem xs="12">
                <MudCard Elevation="0" Outlined="true" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Nutritional Information</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="3">
                                <MudCard Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Typo="Typo.h5">@recipe.Calories</MudText>
                                    <MudText Typo="Typo.caption">Calories</MudText>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="3">
                                <MudCard Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Typo="Typo.h5">@recipe.Fat g</MudText>
                                    <MudText Typo="Typo.caption">Fats</MudText>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="3">
                                <MudCard Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Typo="Typo.h5">@recipe.Carbs g</MudText>
                                    <MudText Typo="Typo.caption">Carbs</MudText>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="3">
                                <MudCard Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Typo="Typo.h5">@recipe.Protein g</MudText>
                                    <MudText Typo="Typo.caption">Protein</MudText>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudCard Elevation="0" Outlined="true" Class="mb-4 h-100">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Ingredients</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudTooltip Text="Add all to shopping list">
                                <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary"
                                                @onclick="@(() => Snackbar.Add("All ingredients added to shopping list", Severity.Success))"/>
                            </MudTooltip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="Ingredients" Dense="true" ReadOnly="true">
                            @foreach (Ingredients ingredient in recipe.Ingredients) {
                                <MudListItem Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" IconColor="Color.Default">
                                    <div class="d-flex align-center">
                                        <div class="flex-grow-1">
                                            
                                            <MudText>
                                                <b>@FormatQuantity(ingredient)</b> @ingredient.Name
                                            </MudText>
                                            @if (!string.IsNullOrEmpty(ingredient.Notes)) {
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">@ingredient.Notes</MudText>
                                            }
                                        </div>
                                        <MudTooltip Text="Add to shopping list">
                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Add" Color="Color.Default"
                                                           @onclick="@(() => AddToShoppingList(ingredient))"/>
                                        </MudTooltip>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudCard Elevation="0" Outlined="true" Class="h-100">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Instructions</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudTooltip Text="Print instructions">
                                <MudIconButton Icon="@Icons.Material.Filled.Print" Color="Color.Default" />
                            </MudTooltip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="Instructions" Dense="true" ReadOnly="true">
                            @foreach (Instructions instruction in recipe.Instructions) {
                                <MudListItem>
                                    <div class="d-flex">
                                        <MudAvatar Color="Color.Info" Class="mr-3" Size="Size.Medium">@instruction.Step</MudAvatar>
                                        <div>
                                            <MudText>@instruction.Body</MudText>
                                        </div>
                                    </div>
                                </MudListItem>
                            }    
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {
    private Recipe? recipe = new();
    private Recipe? originalRecipe; // To store the original state for cancel functionality
    private bool isEditing = false;

    [Parameter] public int? ID { get; set; }
    [Parameter] public Recipe? ExtractedRecipe { get; set; } = null;
    [Parameter] public EventCallback<string> OnRecipeSet { get; set; }
    [Parameter] public EventCallback<bool> OnToggleIsEditing { get; set; }

    protected override async Task OnInitializedAsync() {
        if (ExtractedRecipe != null) {
            recipe = ExtractedRecipe;
        }

        if (ID != null) {
            recipe = await Client.GetFromJsonAsync<Recipe>($"api/recipes/{ID}");
        }
        
        if (recipe.ID != null) {
            await OnRecipeSet.InvokeAsync(recipe.Name);
        } else {
            await OnRecipeSet.InvokeAsync("New Recipe");
        }
        
    }

    private string FormatQuantity(Ingredients ingredient) {
        if (ingredient.Weight is not null) {
            return $"{ingredient.Weight}{ingredient.WeightUnit}";
        }

        if (ingredient.Quantity.HasValue && ingredient.Quantity.Value != 0) {
            // Format fractions nicely
            if (ingredient.Quantity == 0.25) return "¼";
            if (ingredient.Quantity == 0.5) return "½";
            if (ingredient.Quantity == 0.75) return "¾";
            if (ingredient.Quantity == 0.33 || ingredient.Quantity == 0.333) return "⅓";
            if (ingredient.Quantity == 0.66 || ingredient.Quantity == 0.667) return "⅔";

            // Whole numbers don't need decimal places
            if (ingredient.Quantity % 1 == 0) {
                return ingredient.Quantity.Value.ToString("0");
            }

            return ingredient.Quantity.Value.ToString("0.##");
        }

        return string.Empty;
    }

    private void AddToShoppingList(Ingredients ingredient) {
        Snackbar.Add($"Added {ingredient.Name} to shopping list", Severity.Success);
        // Implement shopping list functionality
    }

    private async Task ToggleBookmark() {
        recipe.Bookmarked = !recipe.Bookmarked;
        await Client.PutAsJsonAsync($"api/recipes/{ID}", recipe);
    }
    
    private async Task EnableEdit() {
        await OnToggleIsEditing.InvokeAsync();
    }
}