@using Shared.Models
@inject HttpClient Client
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveWebAssembly

@if (recipe == null) {
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
} else {
    <MudPaper Elevation="2" Class="pa-4">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center">
                    <MudTextField @bind-Value="recipe.Name" Label="Recipe Name" Variant="Variant.Outlined" Class="mr-2"/>
                    <MudTooltip Text="Cancel Edit">
                        <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="CancelEdit">Cancel</MudButton>
                    </MudTooltip>
                </div>
                <MudTextField @bind-Value="recipe.Description" Label="Description" Variant="Variant.Outlined" Lines="3" Class="mt-2 mb-4"/>
            </MudItem>

            <MudItem xs="12">
                <MudCard Elevation="0" Outlined="true" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Nutritional Information</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="3">
                                <MudCard Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudNumericField @bind-Value="recipe.Calories" Label="Calories" Variant="Variant.Outlined"/>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="3">
                                <MudCard Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudNumericField @bind-Value="recipe.Fat" Label="Fat (g)" Variant="Variant.Outlined"/>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="3">
                                <MudCard Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudNumericField @bind-Value="recipe.Carbs" Label="Carbs (g)" Variant="Variant.Outlined"/>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="3">
                                <MudCard Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudNumericField @bind-Value="recipe.Protein" Label="Protein (g)" Variant="Variant.Outlined"/>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudCard Elevation="0" Outlined="true" Class="mb-4 h-100">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Ingredients</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="Ingredients" Dense="true" ReadOnly="true">
                            @foreach (Ingredients ingredient in recipe.Ingredients) {
                                <MudListItem >
                                    <MudStack Row="true" Class="flex-grow-1 align-center">
                                        <MudTextField @bind-Value="ingredient.Name" Variant="Variant.Outlined" Label="Ingredient"/>
                                        <MudTooltip Text="Remove Ingredient">
                                            <MudIconButton Class="align-self-center" Icon="@Icons.Material.Filled.Close" Color="Color.Error" @onclick="@(() => RemoveIngredient(ingredient))"/>
                                        </MudTooltip>
                                    </MudStack>
                                    <MudStack Row="true" Class="flex-grow-1 align-center">
                                        <MudNumericField @bind-Value="ingredient.Quantity" Variant="Variant.Outlined" Label="Qty" Class="mr-2"/>
                                        <MudNumericField @bind-Value="ingredient.Weight" Variant="Variant.Outlined" Label="Weight" Class="mr-2"/>
                                        <MudTextField @bind-Value="ingredient.WeightUnit" Variant="Variant.Outlined" Label="Unit"/>
                                    </MudStack>
                                    <MudStack Row="true" Class="flex-grow-1 align-center mb-5">
                                        <MudTextField @bind-Value="ingredient.Notes" Variant="Variant.Outlined" Label="Notes"/>
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                        <div class="d-flex">
                            <MudTooltip Text="Add Ingredient">
                                <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                               Color="Color.Success" 
                                               Variant="Variant.Outlined" 
                                               @onclick="AddNewIngredient"/>
                            </MudTooltip>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudCard Elevation="0" Outlined="true" Class="h-100">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Instructions</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="Instructions" Dense="true" ReadOnly="true">
                            @foreach (Instructions instruction in recipe.Instructions) {
                                <MudListItem>
                                    <div class="d-flex mb-2">
                                        <MudAvatar Class="mr-3 align-self-center" 
                                                   Color="Color.Info" 
                                                   Size="Size.Medium">@instruction.Step
                                        </MudAvatar>
                                        <div class="flex-grow-1">
                                            <MudTextField @bind-Value="instruction.Body" 
                                                          Variant="Variant.Outlined" 
                                                          Lines="2" 
                                                          Label="Instruction"/>
                                        </div>
                                        <MudTooltip Text="Remove Instruction">
                                            <MudIconButton Class="ml-2 align-self-center" Icon="@Icons.Material.Filled.Close" Color="Color.Error" @onclick="@(() => RemoveInstruction(instruction))"/>
                                        </MudTooltip>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                        <div class="d-flex">
                            <MudTooltip Text="Add Instruction">
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" Variant="Variant.Outlined" @onclick="AddNewInstruction"/>
                            </MudTooltip>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>
}


@code {
    private Recipe? recipe = new();
    private bool isEditing = false;

    [Parameter] public int? ID { get; set; }
    [Parameter] public Recipe? ExtractedRecipe { get; set; } = null;
    [Parameter] public EventCallback<string> OnRecipeSet { get; set; }
    [Parameter] public EventCallback<bool> OnToggleIsEditing { get; set; }

    protected override async Task OnInitializedAsync() {
        if (ExtractedRecipe != null) {
            recipe = ExtractedRecipe;
        }

        if (ID != null) {
            recipe = await Client.GetFromJsonAsync<Recipe>($"api/recipes/{ID}");
        }

        if (recipe.ID != null) {
            await OnRecipeSet.InvokeAsync(recipe.Name);
        } else {
            await OnRecipeSet.InvokeAsync("New Recipe");
        }

    }

    private void AddNewIngredient() {
        recipe.Ingredients.Add(new Ingredients {
            Name = "New Ingredient",
            Quantity = 1
        });
    }

    private void RemoveIngredient(Ingredients ingredient) {
        recipe.Ingredients.Remove(ingredient);
    }

    private void AddNewInstruction() {
        int nextStep = recipe.Instructions.Count + 1;
        recipe.Instructions.Add(new Instructions {
            Step = nextStep,
            Body = "Next step..."
        });
    }

    private void RemoveInstruction(Instructions instruction) {
        recipe.Instructions.Remove(instruction);
        for (int i = 0; i < recipe.Instructions.Count; i++) {
            recipe.Instructions.ElementAt(i).Step = i + 1;
        }
    }

    private async Task CancelEdit() {
        await OnToggleIsEditing.InvokeAsync();
    }
    
    private async Task SaveRecipe() {
        try {
            HttpResponseMessage response = await Client.PutAsJsonAsync($"api/recipes/{ID}", recipe);

            if (response.IsSuccessStatusCode) {
                Snackbar.Add("Recipe saved successfully", Severity.Success);
                isEditing = false;
            } else {
                Snackbar.Add("Error saving recipe", Severity.Error);
            }
        } catch (Exception ex) {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}